PROJECT NOTES
CURRENT OBJECTIVE (10/15):
		Find way to pass methods from SuperClass to Sub Class (Big Chalenge)
		Divide up .cc and .h elements
		Divise translation methods    

CURRENT BUILD:
		Currently, the translator's visitor "walks" through the code, not making any
		impacts or recording anything. Creates a file, and writes "Dadsa" (random 
		letters) to prove that it is able to tranlsate Java code into C++ elements
		(which can then be Assembled).


FUTURE OBJECTIVES:
    Work individually on particular Nodes
    Start explaining our functionality
    Wedge individual code together
    Bug fixing and program sprucing

PAST OBJECTIVES:

SHARED INFORMATION:
WHAT FOO IN JAVA SHOULD BE IN C++

ONGOING LIST OF AST PARTS WITH DESCRIPTIONS

ORGANISATIONAL STUFF


QUICK AND DIRTY SOLUTION TO INHERITENCE ISSUE:
	A second process method that explores methods and finds out if the method has
	a superclass. If it does, it returns the methods to the subclass.


ACTUAL METHODOLOGY:
	The primary objective of JavaGrinder is to write two files, .cc and .h which
	contain a translation of a Java file into C++. These two files will be 
	organized in a similar manner to Robert's java_lang.h/.cc examples. Actual
	translatng will be done in methods, and then PUBLISHED into the different
	ELEMENTS of .h/.cc. An element is a list containing the C++ code in String 
	form. At the very end of the program, all of the elements are ASSEMBLED as
  full .h and .cc files.

List of Elements
	.cc:
		includes
		namespace
		method(function)
		vtabledef
	.h:
		includes
		namespace
		ForwardDeclaration
		Constructor
		DataLayout
		Functions
		VTable
		VTableLayout














NOSTALGIC BULLSHIT NONE OF US EVER READ (Including me, the writer)
Since we are still in the planning phase of this project, this README will also
act as a discussion and organization page for everyone within the group. We
will be continuing to list off objectives, questions, and comments here for the
time being.

WHAT WE LEARNED IN CLASS 9/15
    2 choices for structure representation
        General Node may be preferable for the first semester
            One visitor class(es) vs. type by type class
    2 choices for functionality structures

OBJECTIVES FOR THE WEEKEND:
    1. Read xtc, especially parser
    2. Start thinking of how it will work, to a flowchart level.
    3. What we will designate to Ver. 1
    4. Expand 4-step system into larger instructions
    5. What to do with the GNode, what to take from XTC

GROUP ROLES:
    Speaker: Ari

PREFERENCE OF ROBERT TIME
Thursdays Between 12:15-2:00
Tuesdays Between 12:15-1:00 (Dan's Obligation)
Fridays are out (Justin's Obligation)

STRUCTURE BRAINSTORMING:
Ask questions, propose solutions, and letâ€™s make a structure:
